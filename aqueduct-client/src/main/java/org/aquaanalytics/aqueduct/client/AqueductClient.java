package org.aquaanalytics.aqueduct.client;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;

import org.komparator.supplier.ws.BadProductId_Exception;
import org.komparator.supplier.ws.BadProduct_Exception;
import org.komparator.supplier.ws.BadQuantity_Exception;
import org.komparator.supplier.ws.BadText_Exception;
import org.komparator.supplier.ws.InsufficientQuantity_Exception;
import org.komparator.supplier.ws.ProductView;
import org.komparator.supplier.ws.PurchaseView;
import org.komparator.supplier.ws.SupplierPortType;
import org.komparator.supplier.ws.SupplierService;

/**
 * Client port wrapper.
 *
 * Adds easier end point address configuration to the Port generated by
 * wsimport.
 */
public class AqueductClient implements AqueductPortType {

	/** WS service */
	AqueductService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	AqueductPortType port = null;

	/** WS end point address */
	private String wsURL = null; // default value is defined inside WSDL
	private String uddiURL = null;
	private String nameService = null;

	public String getWsURL() {
		return wsURL;
	}
	
	public String getUddiURL() {
		return uddiURL;
	}
	
	public String getNameService() {
		return nameService;
	}

	/** output option **/
	private boolean verbose = false;

	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided web service URL */
	public AqueductClient(String wsURL) throws SupplierClientException {
		this.wsURL = wsURL;
		createStub();
	}
	
	public AqueductClient(String uddiURL, String nameService) throws SupplierClientException {
		this.uddiURL = uddiURL;
		this.nameService = nameService;
		createStub();
	}

	/** Stub creation and configuration */
	private void createStub() {
		if (verbose)
			System.out.println("Creating stub ...");
		service = new AqueductService();
		port = service.getSupplierPort();

		if (wsURL != null) {
			if (verbose)
				System.out.println("Setting endpoint address ...");
			BindingProvider bindingProvider = (BindingProvider) port;
			Map<String, Object> requestContext = bindingProvider.getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
		}
	}

	// remote invocation methods ----------------------------------------------

}
